# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          lfs: true

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_push_gpgsign: false
          trust_level: 4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.14"

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [[ -z "$TAG" ]]; then
              echo "❌ No tags found in repository. Please create a tag first."
              exit 1
            fi
            echo "✅ Using latest tag for manual dispatch: $TAG"
          else
            TAG="${GITHUB_REF#refs/tags/}"
            echo "✅ Using tag from push event: $TAG"
          fi

          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "❌ Invalid tag format: $TAG (expected: v1.2.3 or similar)"
            exit 1
          fi

          VERSION="${TAG#v}"
          echo "🏷️ Tag: $TAG"
          echo "📦 Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Update version
        run: |
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
        shell: bash

      - name: Update changelog with commitizen
        run: |
          pip install commitizen

          if [[ "${{ github.event_name }}" == "push" ]]; then
            DEFAULT_BRANCH="${GITHUB_REF#refs/heads/}"
            if [[ "$GITHUB_REF" == refs/tags/* ]]; then
              DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
            fi
            echo "🔄 Switching from detached HEAD to $DEFAULT_BRANCH branch..."
            git checkout $DEFAULT_BRANCH
            git pull origin $DEFAULT_BRANCH
          fi

          cz changelog

          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git add CHANGELOG.md pyproject.toml
            echo "✅ Committing changes with GPG signing..."
            git commit -S -m "chore: update changelog and version for $VERSION"
            git push
          fi
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          pip install -e .
          pip uninstall -y unbabelizer

      - name: Build package
        run: python -m build

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip-existing: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          draft: "false"
          generate_release_notes: "true"
          make_latest: "true"
          prerelease: "false"
        continue-on-error: true # Don't fail if release already exists
